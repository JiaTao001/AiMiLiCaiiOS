//
//  FindPasswordViewController.m
//  YuanXin_Project
//
//  Created by Sword on 15/9/21.
//  Copyright © 2015年 yuanxin. All rights reserved.
//

#import "FindPasswordVC.h"
#import "VerifyCodeButton.h"
#import "LimitTextField.h"

#import "UserinfoManager.h"

#define FIND_PASSWORD_SMS_TYPE @"forgetpwd"

@interface FindPasswordVC ()

@property (strong, nonatomic) NSURLSessionTask *task;

@property (weak, nonatomic) IBOutlet LimitTextField *account;
@property (weak, nonatomic) IBOutlet LimitTextField *verifyCode;
@property (weak, nonatomic) IBOutlet LimitTextField *password;
@end

@implementation FindPasswordVC

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    [self layoutNavigationLeftButtonWithImage:[UIImage imageNamed:Nav_Back_Image] block:^(UIViewController *viewController) {
        [viewController.navigationController popViewControllerAnimated:YES];
    }];
}
- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
    
    [self.task cancel];
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
}

#pragma mark - action
- (IBAction)fetchAuthCode:(VerifyCodeButton *)sender
{
    if (self.account.success) {
        
        [self.view endEditing:YES];
        [BaseIndicatorView showInView:self.view maskType:kIndicatorMaskContent];
        @weakify(self)
        self.task = [NetworkContectManager sessionPOSTWithMothed:SMS_SEND params:@{KEY_MOBILE:[self.account.text RSAPublicEncryption], VERIFY_CODE_TYPE_KEY:FIND_PASSWORD_SMS_TYPE} success:^(NSURLSessionTask *task, id result) {
            @strongify(self)
            
            [SpringAlertView showInWindow:self.view.window message:result[RESULT_REMARK]];
            [sender countDown:AUTHCODE_REPEAT_INTERVAL];
            [BaseIndicatorView hideWithAnimation:self.didShow];
        } failure:^(NSURLSessionTask *task, id result, NSString *errorDescription) {
            @strongify(self)
            
            [SpringAlertView showInWindow:self.view.window message:errorDescription];
            [BaseIndicatorView hideWithAnimation:self.didShow];
        }];
        
    } else {
        [SpringAlertView showMessage:NSLocalizedString(@"err_phone", nil)];
    }
}

- (IBAction)findPassword:(UIButton *)sender
{
    if (!self.account.success) {
        [SpringAlertView showMessage:NSLocalizedString(@"err_phone", nil)];
        return;
    }
    if (!self.password.success) {
        [SpringAlertView showMessage:NSLocalizedString(@"err_password", nil)];
        return;
    }
    if (!self.verifyCode.success) {
        [SpringAlertView showMessage:NSLocalizedString(@"err_verify", nil)];
        return;
    }
    [self.view endEditing:YES];

    NSMutableDictionary *params = [[NSMutableDictionary alloc] init];
    [params setValue:[self.account.text RSAPublicEncryption] forKey:KEY_MOBILE];
    [params setValue:[self.password.text RSAPublicEncryption] forKey:KEY_PASSWORD];
    [params setValue:self.verifyCode.text forKey:KEY_VERIFYCODE];
    
    [BaseIndicatorView showInView:self.view];
    
    @weakify(self)
    self.task = [[UserinfoManager sharedUserinfo] startRequest:kUserinfoOperationFindPassword   params:params success:^(id result) {
        @strongify(self)
        
        [SpringAlertView showInWindow:self.view.window message:result[RESULT_REMARK]];
        [BaseIndicatorView hideWithAnimation:self.didShow];
        [self.navigationController popViewControllerAnimated:YES];
    } failure:^(id result, NSString *errorDescription) {
        @strongify(self)
        
        [SpringAlertView showInWindow:self.view.window message:errorDescription];
        [BaseIndicatorView hideWithAnimation:self.didShow];
    }];
}

#pragma mark - setter & getter
- (void)setAccount:(LimitTextField *)account
{
    _account = account;
    
    account.text = self.preAccount;
}

@end
