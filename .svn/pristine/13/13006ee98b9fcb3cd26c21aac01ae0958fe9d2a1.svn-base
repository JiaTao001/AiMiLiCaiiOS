//
//  RegisterViewController.m
//  YuanXin_Project
//
//  Created by Sword on 15/9/21.
//  Copyright © 2015年 yuanxin. All rights reserved.
//

#import "RegisterViewController.h"
#import "LoginNavigationController.h"
#import "AuthenticationVC.h"

#import "GesturePasswordVC.h"
#import "LoginViewController.h"

#import "VerifyCodeButton.h"
#import "LimitTextField.h"

#import "UserinfoManager.h"
#import <LocalAuthentication/LocalAuthentication.h>
#import "WebVC.h"

#define REGISTER_SMS_TYPE @"register"

@interface RegisterViewController ()

@property (strong, nonatomic) NSURLSessionTask *task;

@property (weak, nonatomic) IBOutlet LimitTextField *account;
@property (weak, nonatomic) IBOutlet LimitTextField *verifyCode;
@property (weak, nonatomic) IBOutlet LimitTextField *password;
@end


@implementation RegisterViewController

#pragma mark - life cycle
- (void)viewDidLoad
{
    [super viewDidLoad];
    
    [self layoutNavigationLeftButtonWithImage:[UIImage imageNamed:Nav_Back_Image] block:^(UIViewController *viewController) {
        
        if ([viewController isEqual:[viewController.navigationController.viewControllers firstObject]]) {
            
            [(LoginNavigationController *)viewController.navigationController dismissLoginSuccess:NO completion:nil];
        } else {
            [viewController.navigationController popViewControllerAnimated:YES];
        }
    }];
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
    
    [self.task cancel];
}


- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
}

#pragma mark - action

- (IBAction)fetchAuthCode:(VerifyCodeButton *)sender
{
    if (self.account.success) {
        
        [self.view endEditing:YES];
        
        [BaseIndicatorView showInView:self.view maskType:kIndicatorMaskContent];
        @weakify(self)
        self.task = [NetworkContectManager sessionPOSTWithMothed:SMS_SEND params:@{KEY_MOBILE:[self.account.text RSAPublicEncryption], VERIFY_CODE_TYPE_KEY:REGISTER_SMS_TYPE} success:^(NSURLSessionTask *task, id result) {
            @strongify(self)
            
            [SpringAlertView showInWindow:self.view.window message:result[RESULT_REMARK]];
            [sender countDown:AUTHCODE_REPEAT_INTERVAL];
            
            [BaseIndicatorView hideWithAnimation:self.didShow];
        } failure:^(NSURLSessionTask *task, id result, NSString *errorDescription) {
            @strongify(self)
            
            [SpringAlertView showInWindow:self.view.window message:errorDescription];
            [BaseIndicatorView hideWithAnimation:self.didShow];
        }];
        
    } else {
        [SpringAlertView showInWindow:self.view.window message:NSLocalizedString(@"err_phone", nil)];
    }
}

- (IBAction)registerAccount:(UIButton *)sender
{
    if (!self.account.success) {
        [SpringAlertView showMessage:NSLocalizedString(@"err_phone", nil)];
        return;
    }
    if (!self.password.success) {
        [SpringAlertView showMessage:NSLocalizedString(@"err_password", nil)];
        return;
    }
    if (!self.verifyCode.success) {
        [SpringAlertView showMessage:NSLocalizedString(@"err_verify", nil)];
        return;
    }
    [self.view endEditing:YES];
    
    NSMutableDictionary *params = [[NSMutableDictionary alloc] init];
    [params setValue:[self.account.text RSAPublicEncryption] forKey:KEY_MOBILE];
    [params setValue:[self.password.text RSAPublicEncryption] forKey:KEY_PASSWORD];
    [params setValue:self.verifyCode.text forKey:KEY_VERIFYCODE];
    
    [BaseIndicatorView showInView:self.view];
    @weakify(self)
    self.task = [[UserinfoManager sharedUserinfo] startRequest:kUserinfoOperationRegister params:params success:^(id result) {
        @strongify(self)
        
        [BaseIndicatorView hideWithAnimation:self.didShow];
        [[UserinfoManager sharedUserinfo] saveLastAccount];
        [self registerCompletion];
        [SpringAlertView showInWindow:self.view.window message:result[RESULT_REMARK]];
    } failure:^(id result, NSString *errorDescription) {
        @strongify(self)
        
        [BaseIndicatorView hideWithAnimation:self.didShow];
        [SpringAlertView showInWindow:self.view.window message:errorDescription];
    }];
}


- (IBAction)checkUserAgreement:(UIButton *)sender
{
    [self.navigationController pushViewController:[[WebVC alloc] initWithWebPath:[CommonTools completeWebPathWithSubpath:Introduce_Protocol]] animated:YES];
}

#pragma mark - private method

- (void)registerCompletion
{
    GesturePasswordVC *vc = [AiMiApplication obtainControllerForMainStoryboardWithID:GESTURE_PASSWORD_STORYBOARD_ID];
    vc.type = kGesturePasswordSetting;
    [self.navigationController pushViewController:vc animated:YES];
    
    @weakify(self)
    [vc setCompletionBlock:^(GesturePasswordVC *vc, GesturePasswordOperationType type) {
        @strongify(self)
        //打开手势密码
        if (kGesturePasswordOperationSuccess == type) {
            NSUserDefaults *userDefaults = USERDEFAULTS;
            [userDefaults setBool:YES forKey:DID_OPEN_GESTURE];
            [userDefaults synchronize];
            //打开TouchID
            if ([[[LAContext alloc] init] canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:nil]) {
                
                [AlertViewManager showInViewController:self title:nil message:@"是否开启 Touch ID" clickedButtonAtIndex:^(id alertView, NSInteger buttonIndex) {
                    
                    NSUserDefaults *userDefaults = USERDEFAULTS;
                    [userDefaults setBool:buttonIndex forKey:DID_OPEN_TOUCHID];
                    [userDefaults synchronize];
                    
                    [self showAuthUserInfo:YES];
                } cancelButtonTitle:NSLocalizedString(@"cancel", nil) otherButtonTitles:NSLocalizedString(@"confirm", nil), nil];
            } else {
                [self showAuthUserInfo:YES];
            }
        } else {
            [self showAuthUserInfo:NO];
        }
    }];
}

- (void)showAuthUserInfo:(BOOL)setupGesurePasswordSuccess
{
    [AlertViewManager showInViewController:self title:nil message:(setupGesurePasswordSuccess ? [[NSString alloc] initWithFormat:@"%@\n%@", @"设置手势成功", NSLocalizedString(@"alert_info_text", nil)] : NSLocalizedString(@"alert_info_text", nil) ) clickedButtonAtIndex:^(UIAlertView *alertView, NSInteger buttonIndex) {
        
        if (1 == buttonIndex) {
            [self.navigationController pushViewController:[[AuthenticationVC alloc] initWithCancelCallBack:^{
                [(LoginNavigationController *)self.navigationController dismissLoginSuccess:YES completion:nil];
            }] animated:YES];
        } else {
            
            [(LoginNavigationController *)self.navigationController dismissLoginSuccess:YES completion:nil];
        }
    } cancelButtonTitle:NSLocalizedString(@"not_set", nil) otherButtonTitles:NSLocalizedString(@"set", nil), nil];
}

@end
