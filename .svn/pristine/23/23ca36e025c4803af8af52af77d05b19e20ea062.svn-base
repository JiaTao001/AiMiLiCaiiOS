//
//  OptimizationEntrustVC.m
//  YuanXin_Project
//
//  Created by Yuanin on 16/5/4.
//  Copyright © 2016年 yuanxin. All rights reserved.
//

#import "OptimizationEntrustVC.h"

#import "WebVC.h"

#import "LimitTextField.h"
#import "PickerAccessoryView.h"
#import "SinglePickerView.h"

#import "BaseViewModel.h"

@interface OptimizationEntrustVC ()

@property (strong, nonatomic) NSArray *optimizationInfo;
@property (strong, nonatomic) BaseViewModel *baseViewModel;
@property (strong, nonatomic) UIDatePicker  *datePicker;
@property (strong, nonatomic) NSDateFormatter *dateFormat;

@property (strong, nonatomic) NSArray<SinglePickerView *> *pickerViews;
@property (strong, nonatomic) SinglePickerView *aprPickerView;
@property (strong, nonatomic) SinglePickerView *dayPickerView;
@property (strong, nonatomic) SinglePickerView *monthPickerView;

@property (weak, nonatomic) IBOutlet UIScrollView *contentView;
@property (weak, nonatomic) IBOutlet UIButton *saveAndEntrust;
@property (strong, nonatomic) IBOutletCollection(UITextField) NSArray *userInput;
@property (weak, nonatomic) IBOutlet LimitTextField *entrustMoney;
@property (weak, nonatomic) IBOutlet UITextField *entrustTime;
@property (weak, nonatomic) IBOutlet UILabel *balance;

@property (weak, nonatomic) IBOutlet UIButton    *selectedDay;
@property (weak, nonatomic) IBOutlet UIButton    *selectedMonth;
@property (weak, nonatomic) IBOutlet UITextField *minApr;
@property (weak, nonatomic) IBOutlet UITextField *maxApr;
@property (weak, nonatomic) IBOutlet UITextField *minDay;
@property (weak, nonatomic) IBOutlet UITextField *maxDay;
@property (weak, nonatomic) IBOutlet UITextField *minMonth;
@property (weak, nonatomic) IBOutlet UITextField *maxMonth;
@end

@implementation OptimizationEntrustVC

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    [self layoutNavigationLeftButtonWithImage:[UIImage imageNamed:Nav_Back_Image] block:^(__kindof UIViewController *viewController) {
        [viewController.navigationController popViewControllerAnimated:YES];
    }];
    
    [self fetchOptimizationEntrustInfo];
}
- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    
    [self.baseViewModel cancelFetchOperation];
}

#pragma mark - action
- (IBAction)selected:(UIButton *)sender {
    
    sender.selected = !sender.selected;
}
- (IBAction)entrust:(UIButton *)sender {
    
    if (!self.minApr.text.length || !self.maxApr.text.length || self.minApr.text.integerValue > self.maxApr.text.integerValue) {
        [SpringAlertView showMessage:@"请输入有效的利率区间"];
        return;
    }
    if (!self.selectedDay.selected && !self.selectedMonth.selected) {
        [SpringAlertView showMessage:@"请至少选择一种期限范围"];
        return;
    }
    if ((self.selectedDay.selected && (!self.minDay.text.length || !self.maxDay.text.length || self.minDay.text.integerValue >= self.maxDay.text.integerValue) )
        || (self.selectedMonth.selected && (!self.minMonth.text.length || !self.maxMonth.text.length || self.minMonth.text.integerValue >= self.maxMonth.text.integerValue))) {
        [SpringAlertView showMessage:@"请选择有效的期限区间"];
        return;
    }
    if (!self.entrustMoney.success || [self.entrustMoney.text integerValue]%100 != 0 || [self.entrustMoney.text integerValue] < 1000) {
        [SpringAlertView showMessage:NSLocalizedString(@"err_money", nil)];
        return;
    }
    
    [BaseIndicatorView showInView:self.view maskType:kIndicatorMaskContent];
    
    @weakify(self)
    [self.baseViewModel postMethod:@"saveentrustpreferred" params:[self createUserParams] success:^(id result) {
        @strongify(self)
        
        [BaseIndicatorView hideWithAnimation:self.didShow];
        [SpringAlertView showMessage:result[RESULT_REMARK]];
        [self.navigationController popViewControllerAnimated:YES];
        if (self.entrustSuccess) {
            self.entrustSuccess();
        }
    } failure:^(id result, NSString *errorDescription) {
        @strongify(self)
        
        [BaseIndicatorView hideWithAnimation:self.didShow];
        [SpringAlertView showMessage:errorDescription];
    }];
}

- (NSDictionary *)createUserParams {
    //    saveentrustpreferred（保存优选委托投资） => userid（用户uid）、mobile（手机号）、beginannual（开始年化收益率）、endannual（截止年化收益率）、beginday（开始天数）、endday（截止天数）、beginmonth（开始月份）、endmonth（截止月份）、amount（委托金额）、entrustdate（委托时间）
    //
    //    返回值 result=1表示委托成功；0表示委托失败
    NSMutableDictionary *result = [[UserinfoManager sharedUserinfo] increaseUserParams:nil];
    
    [result addEntriesFromDictionary:@{@"beginannual":self.minApr.text, @"endannual":self.maxApr.text, @"beginday":Dislodge_Nil_String(self.minDay.text), @"endday":Dislodge_Nil_String(self.maxDay.text), @"beginmonth":Dislodge_Nil_String(self.minMonth.text), @"endmonth":Dislodge_Nil_String(self.maxMonth.text), @"amount":self.entrustMoney.text, @"entrustdate":self.entrustTime.text}];
    
    return result;
}

- (IBAction)intoProtocol:(UIButton *)sender {
    
    [self.navigationController pushViewController:[WebVC webVCWithWebPath:[CommonTools completeWebPathWithSubpath:0 == sender.tag ? Introduce_Buy : Introduct_Entrust]] animated:YES];
}


#pragma mark - private
- (void)fetchOptimizationEntrustInfo {
//    3.3、getentrustpreferredparameter（优选委托投资配置参数）=> userid（用户uid）、mobile（手机号）
//    返回list 投资期限(月)、投资期限(天)、年化收益率、可用余额
    
    [BaseIndicatorView showInView:self.view  maskType:kIndicatorNoMask];
    @weakify(self)
    [self.baseViewModel postMethod:@"getentrustpreferredparameter" params:[[UserinfoManager sharedUserinfo] increaseUserParams:nil] success:^(id result) {
        @strongify(self)
        
        [BaseIndicatorView hideWithAnimation:self.didShow];
        self.optimizationInfo = result[RESULT_DATA];
    } failure:^(id result, NSString *errorDescription) {
        @strongify(self)
        
        [BaseIndicatorView hideWithAnimation:self.didShow];
        [SpringAlertView showMessage:errorDescription];
    }];
}

#pragma mark - delegate
- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    
    [textField endEditing:YES];
    return YES;
}

#pragma mark - setter
- (void)setEntrustTime:(UITextField *)entrustTime {
    _entrustTime = entrustTime;
    
    entrustTime.text = [self.dateFormat stringFromDate:[NSDate date]];
    entrustTime.inputView = self.datePicker;
    
    @weakify(self);
    entrustTime.inputAccessoryView = [PickerAccessoryView pickerAccessoryViewWithDoneBlock:^{
        @strongify(self)
        
        [self.entrustTime endEditing:YES];
        self.entrustTime.text = [self.dateFormat stringFromDate:self.datePicker.date];
    } cancelBlock:^{
        @strongify(self)
        
        [self.entrustTime endEditing:YES];
    }];
}
- (void)setBalance:(UILabel *)balance {
    _balance = balance;
    
    [RACObserve([UserinfoManager sharedUserinfo].userInfo, balance) subscribeNext:^(NSString *newBalance) {
        balance.text = newBalance;
    }];
}
- (void)setUserInput:(NSArray *)userInput {
    _userInput = userInput;
    
    for (UITextField *text in userInput) {
        
        text.inputView = self.pickerViews[text.tag];
        __weak UITextField *weak_text = text;
        @weakify(self)
        text.inputAccessoryView = [PickerAccessoryView pickerAccessoryViewWithDoneBlock:^{
            @strongify(self)
            [weak_text endEditing:YES];
            weak_text.text = [[self.pickerViews[text.tag] selectedInfo] componentsJoinedByString:@""];
        } cancelBlock:^{
            [weak_text endEditing:YES];
        }];
        
        UIView *paddingView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 10, 20)];
        text.leftView = paddingView;
        text.leftViewMode = UITextFieldViewModeAlways;
    }
}
- (void)setOptimizationInfo:(NSArray *)optimizationInfo {
    _optimizationInfo = optimizationInfo;
    
    if (optimizationInfo.count < self.pickerViews.count) return;
    
    for (NSInteger i = 0; i < self.pickerViews.count; ++i) {
        SinglePickerView *view = self.pickerViews[i];
        view.pickerInfo = optimizationInfo[i];
    }
    
    self.contentView.hidden = NO;
    self.saveAndEntrust.hidden = NO;
}

#pragma mark - getter
- (BaseViewModel *)baseViewModel {
    if (!_baseViewModel) {
        _baseViewModel = [[BaseViewModel alloc] init];
    }
    return _baseViewModel;
}
- (UIDatePicker *)datePicker {
    
    if (!_datePicker) {
        _datePicker = [[UIDatePicker alloc] init];
        _datePicker.datePickerMode = UIDatePickerModeDate;
        _datePicker.minimumDate = [NSDate date];
    }
    return _datePicker;
}
- (NSDateFormatter *)dateFormat {
    
    if (!_dateFormat) {
        _dateFormat = [[NSDateFormatter alloc] init];
        _dateFormat.dateFormat = @"y/MM/dd";
    }
    return _dateFormat;
}

- (SinglePickerView *)dayPickerView {
    if (!_dayPickerView) {
        _dayPickerView = [[SinglePickerView alloc] init];
        _dayPickerView.frame = CGRectMake(0, 0, UISCREEN_WIDTH, 180);
    }
    return _dayPickerView;
}
- (SinglePickerView *)aprPickerView {
    if (!_aprPickerView) {
        _aprPickerView = [[SinglePickerView alloc] init];
        _aprPickerView.frame = CGRectMake(0, 0, UISCREEN_WIDTH, 180);
    }
    return _aprPickerView;
}
- (SinglePickerView *)monthPickerView {
    if (!_monthPickerView) {
        _monthPickerView = [[SinglePickerView alloc] init];
        _monthPickerView.frame = CGRectMake(0, 0, UISCREEN_WIDTH, 180);
    }
    return _monthPickerView;
}

- (NSArray<SinglePickerView *> *)pickerViews {
    if (!_pickerViews) {
        _pickerViews = @[self.dayPickerView, self.monthPickerView, self.aprPickerView];
    }
    return _pickerViews;
}

@end
